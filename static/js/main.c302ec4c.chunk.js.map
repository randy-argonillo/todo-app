{"version":3,"sources":["components/TodoItem.js","components/interfaces.js","components/TodoForm.js","components/EditableTodoItem.js","components/TodoList.js","components/CompletedTodos/index.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","PropTypes","shape","id","string","description","isCompleted","bool","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isInViewPort","todoItem","current","getBoundingClientRect","top","scrollToBottom","scrollIntoView","behavior","handleEdit","_this$props","onEdit","todo","handleRemove","_this$props2","onRemove","handleDescClick","_this$props3","onToggleComplete","React","createRef","react_default","a","createElement","className","ref","onClick","onKeyPress","role","tabIndex","concat","es_button","type","icon","size","Component","defaultProps","ToDoForm","state","handleChange","evt","value","target","setState","prevState","objectSpread","handleSubmit","preventDefault","onSubmit","inputRef","mode","focus","placeholder","name","onChange","EditableTodoItem","isEdit","handleEditTodo","components_TodoForm","TodoItem","TodoList","bottomPlaceholder","todos","TransitionGroup","map","CSSTransition","key","timeout","classNames","components_EditableTodoItem","CompletedTodos","_ref","onClearCompletedTodos","length","src_components_TodoList","TodoApp","handleAddTodo","toConsumableArray","uuid","item","filter","handleToggleComplete","handleClearCompletedTodos","getActiveTodos","getCompletedTodos","components_CompletedTodos","App","src_TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c302ec4c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\n\nimport { Todo } from './interfaces';\n\nimport 'antd/dist/antd.css';\nimport '../Todo.css';\n\nclass ToDoItem extends React.Component {\n  static defaultProps = {\n    onEdit: () => {},\n    onRemove: () => {},\n    onToggleComplete: () => {}\n  };\n\n  static propTypes = {\n    todo: Todo.isRequired,\n    onEdit: PropTypes.func,\n    onRemove: PropTypes.func,\n    onToggleComplete: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.todoItem = React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.isInViewPort()) {\n      this.scrollToBottom();\n    }\n  }\n\n  isInViewPort = () => {\n    const bounding = this.todoItem.current.getBoundingClientRect();\n    return bounding.top < 580;\n  }\n\n  scrollToBottom = () =>\n    this.todoItem.current.scrollIntoView({ behavior: 'smooth' });\n\n  handleEdit = () => {\n    const { onEdit, todo } = this.props;\n    onEdit(todo);\n  };\n\n  handleRemove = () => {\n    const { onRemove, todo } = this.props;\n    onRemove(todo);\n  };\n\n  handleDescClick = () => {\n    const { onToggleComplete, todo } = this.props;\n    onToggleComplete(todo);\n  };\n\n  render() {\n    const { todo } = this.props;\n\n    return (\n      <li className=\"TodoItem\" ref={this.todoItem}>\n        <div\n          onClick={this.handleDescClick}\n          onKeyPress={this.handleDescClick}\n          role=\"button\"\n          tabIndex=\"0\"\n          className={`description ${todo.isCompleted ? 'completed' : ''}`}\n        >\n          {todo.description}\n        </div>\n        <div className=\"action-buttons\">\n          <Button\n            type=\"primary\"\n            icon=\"edit\"\n            shape=\"circle\"\n            size=\"small\"\n            onClick={this.handleEdit}\n          />\n          <Button\n            type=\"danger\"\n            icon=\"delete\"\n            shape=\"circle\"\n            size=\"small\"\n            onClick={this.handleRemove}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default ToDoItem;\n","import PropTypes from 'prop-types';\n\nconst Todo = PropTypes.shape({\n  id: PropTypes.string,\n  description: PropTypes.string,\n  isCompleted: PropTypes.bool\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport { Todo };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Todo } from './interfaces';\nimport './TodoForm.css'\n\nclass ToDoForm extends React.Component {\n  static defaultProps = {\n    onSubmit: () => {},\n    todo: { id: null, description: '' }\n  };\n\n  static propTypes = {\n    onSubmit: PropTypes.func,\n    todo: Todo\n  };\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  state = {\n    todo: this.props.todo\n  };\n\n  componentDidMount() {\n    if (this.mode === 'edit') {\n      this.inputRef.current.focus();\n    }\n  }\n\n  get mode() {\n    const { todo } = this.state;\n    return todo.id ? 'edit' : 'add';\n  }\n\n  handleChange = evt => {\n    const { value } = evt.target;\n    this.setState(prevState => ({\n      todo: { ...prevState.todo, description: value }\n    }));\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (this.state.todo.description === '') return;\n    // eslint-disable-next-line react/destructuring-assignment\n    this.props.onSubmit(this.state.todo);\n    this.setState({ todo: { id: null, description: '' } });\n  };\n\n  render() {\n    const { todo } = this.state;\n\n    const placeholder = this.mode === 'add' ? 'Add todo' : '';\n\n    return (\n      <form className=\"TodoForm\" onSubmit={this.handleSubmit}>\n        <input\n          className={`${\n            this.mode === 'add' ? 'todoInputAdd' : 'todoInputEdit'\n          }`}\n          ref={this.inputRef}\n          name=\"description\"\n          value={todo.description}\n          onChange={this.handleChange}\n          placeholder={placeholder}\n        />\n      </form>\n    );\n  }\n}\n\nexport default ToDoForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\n\nimport { Todo } from './interfaces';\n\n\nclass EditableTodoItem extends React.Component {\n  static propTypes = {\n    todo: Todo.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onRemove: PropTypes.func,\n    onToggleComplete: PropTypes.func\n  };\n\n  static defaultProps = {\n    onRemove: () => {},\n    onToggleComplete: () => {}\n  };\n\n  state = {\n    isEdit: false\n  };\n\n  handleEditTodo = () => this.setState({ isEdit: true });\n\n  handleSubmit = todo => {\n    const { onEdit } = this.props;\n\n    onEdit(todo);\n    this.setState({ isEdit: false });\n  };\n\n  render() {\n    const { todo, onRemove, onToggleComplete } = this.props;\n    const { isEdit } = this.state;\n\n    return (\n      <div>\n        {isEdit ? (\n          <TodoForm onSubmit={this.handleSubmit} todo={todo} />\n        ) : (\n          <TodoItem\n            todo={todo}\n            onEdit={this.handleEditTodo}\n            onRemove={onRemove}\n            onToggleComplete={onToggleComplete}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EditableTodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport EditableTodoItem from './EditableTodoItem';\nimport { Todo } from './interfaces';\n\nimport '../Todo.css';\nimport './TodoList.css';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.bottomPlaceholder = React.createRef();\n  }\n\n  // componentDidMount() {\n  //   this.scrollToBottom();\n  // }\n\n  // componentDidUpdate() {\n  //   this.scrollToBottom();\n  // }\n\n  // scrollToBottom = () =>\n  //   this.bottomPlaceholder.current.scrollIntoView({ behavior: 'smooth' });\n  \n  render() {\n    const { todos, onEdit, onRemove, onToggleComplete } = this.props; \n\n    return (\n      <div className=\"TodoList\">\n        <ul className=\"list\">\n          <TransitionGroup>\n            {todos.map(todo => (\n              <CSSTransition key={todo.id} timeout={500} classNames=\"move\">\n                <EditableTodoItem\n                  key={todo.id}\n                  todo={todo}\n                  onEdit={onEdit}\n                  onRemove={onRemove}\n                  onToggleComplete={onToggleComplete}\n                />\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ul>\n        <div ref={this.bottomPlaceholder} />\n      </div>\n    );\n  }\n}\n\nTodoList.defaultProps = {\n  onEdit: () => {},\n  onRemove: () => {},\n  onToggleComplete: () => {}\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(Todo).isRequired,\n  onEdit: PropTypes.func,\n  onRemove: PropTypes.func,\n  onToggleComplete: PropTypes.func\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { Button } from 'antd';\n\nimport TodoList from '../TodoList';\nimport './CompletedTodos.css';\n\nconst CompletedTodos = ({\n  todos,\n  onEdit,\n  onRemove,\n  onToggleComplete,\n  onClearCompletedTodos\n}) =>\n  todos.length > 0 && (\n    <div className=\"CompletedTodos\">\n      <div className=\"CompletedTodos__header\">\n        <h3>Completed</h3>\n        <Button size=\"small\" shape=\"round\" onClick={onClearCompletedTodos}>\n          Clear\n        </Button>\n      </div>\n      <div className=\"body\">\n        <TodoList\n          todos={todos}\n          onEdit={onEdit}\n          onRemove={onRemove}\n          onToggleComplete={onToggleComplete}\n        />\n      </div>\n    </div>\n  );\n\nexport default CompletedTodos;\n","import React from 'react';\nimport uuid from 'uuid/v4';\n\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport CompletedTodos from './components/CompletedTodos';\n\nimport './Todo.css';\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: []\n  };\n\n  handleAddTodo = todo =>\n    this.setState(prevState => ({\n      todos: [...prevState.todos, { ...todo, id: uuid() }]\n    }));\n\n  handleEdit = todo => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(item => (item.id === todo.id ? todo : item))\n    }));\n  };\n\n  handleRemove = todo => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.id !== todo.id)\n    }));\n  };\n\n  handleToggleComplete = todo => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(item =>\n        item.id === todo.id ? { ...todo, isCompleted: !todo.isCompleted } : item\n      )\n    }));\n  };\n\n  handleClearCompletedTodos = () => {\n    this.setState({ todos: this.getActiveTodos() });\n  };\n\n  getCompletedTodos = () => this.state.todos.filter(todo => todo.isCompleted);\n\n  getActiveTodos = () => this.state.todos.filter(todo => !todo.isCompleted);\n\n  render() {\n    return (\n      <div className=\"TodoApp\">\n        <div className=\"header\">\n          <h2>Your Daily To Dos</h2>\n        </div>\n        <TodoForm onSubmit={this.handleAddTodo} />\n        <TodoList\n          todos={this.getActiveTodos()}\n          onEdit={this.handleEdit}\n          onRemove={this.handleRemove}\n          onToggleComplete={this.handleToggleComplete}\n        />\n        <CompletedTodos\n          todos={this.getCompletedTodos()}\n          onEdit={this.handleEdit}\n          onRemove={this.handleRemove}\n          onToggleComplete={this.handleToggleComplete}\n          onClearCompletedTodos={this.handleClearCompletedTodos}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\n\nimport ToDoApp from './TodoApp';\n\nfunction App() {\n  return <ToDoApp />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}